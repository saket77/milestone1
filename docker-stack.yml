version: "3.5"
services:
  app:
    image: saket7/cs2304_api
    command: npm run start
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]

      labels:
            - "traefik.backend= app"
            - "traefik.frontend.rule=PathPrefixStrip:/api"
            - "traefik.port=3000"
            - "traefik.enable=true"


    working_dir: /app
    networks:
      - webnet 

  reverse-proxy:
    image: traefik 
    read_only: true
    command: --api --docker --docker.swarmMode
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    ports:
      - "80:80" 
      - "8080:8080"
    networks:
      - webnet    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
       # So that Traefik can listen to the Docker events


  client:
    image: vtcs2304s19/blabber-client
    networks:
      - webnet
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
      labels:
            - "traefik.backend= client"
            - "traefik.frontend.rule=/"
            - "traefik.port=80"
            - "traefik.enable=true"
  tests:
    image: vtcs2304s19/blabber-api-tests
    environment:
      SERVICE_NAME: app
      API_PORT: "3000" 
    deploy:
      replicas: 1
      restart_policy: 
        condition: on-failure
      placement: 
        constraints: [node.role == worker] 
    networks:
      - webnet
  mongo:
    image: mongo
    networks:
      - webnet
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]    
    volumes: 
      - mongo-data:/data/db
    secrets:
      -my_secret

volumes:
  mongo-data:
networks:
  webnet:
secrets:
  my_secret:
    file: ./mysecret.txt


